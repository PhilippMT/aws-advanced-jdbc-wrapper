# Spring Boot Actuator (optional, good for monitoring)
management.endpoints.web.exposure.include=health,info,metrics,env,beans,configprops,flyway,loggers

# Datasource Configuration
spring.datasource.url=jdbc:aws-wrapper:postgresql://your-db-cluster-endpoint.cluster-xxxxxxxxxxxx.your-region.rds.amazonaws.com:5432/your_database_name
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=software.amazon.jdbc.Driver

# HikariCP settings (default pool used by Spring Boot)
spring.datasource.hikari.pool-name=SpringBootAuroraHikariCP
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=30000 # 30 seconds
spring.datasource.hikari.idle-timeout=600000 # 10 minutes

# AWS Advanced JDBC Driver specific properties passed through HikariDataSource
# Registering the custom plugin - 'auroraAdvancedFeatures' is the code defined in META-INF/services
# The actual code used by the driver to look up the factory will be based on the META-INF/services file entry.
# For example, if META-INF/services/software.amazon.jdbc.ConnectionPluginFactory contains:
#   software.amazon.jdbc.plugin.aurora.AuroraAdvancedFeaturesPluginFactory auroraAdvancedFeatures
# then 'auroraAdvancedFeatures' is the correct code.
# If the factory is registered with its fully qualified class name, that should be used.
# Let's assume 'auroraAdvancedFeatures' is the registered plugin code.
spring.datasource.hikari.data-source-properties.wrapperPlugins=auroraAdvancedFeatures,failover,efm2
# To use default plugins as well, list them: failover,efm,efm2,iam,secretsManager,auroraConnectionTracker,logQuery,etc.
# 'failover' is usually enabled by default if not specifying any.
# 'efm2' is an enhanced failure monitoring plugin.

# Example property for our custom plugin (AuroraAdvancedFeaturesPlugin)
# This assumes our plugin reads 'auroraPluginPreferredAz' from the properties.
spring.datasource.hikari.data-source-properties.auroraPluginPreferredAz=us-east-1a

# Example: Target driver properties (PostgreSQL specific)
# spring.datasource.hikari.data-source-properties.PGUSER=${spring.datasource.username}
# spring.datasource.hikari.data-source-properties.PGPASSWORD=${spring.datasource.password}
# spring.datasource.hikari.data-source-properties.ssl=true
# spring.datasource.hikari.data-source-properties.sslmode=verify-full
# spring.datasource.hikari.data-source-properties.connectTimeout=5
# spring.datasource.hikari.data-source-properties.socketTimeout=30


# Flyway Configuration
spring.flyway.enabled=true
# spring.flyway.locations=classpath:db/migration,classpath:db/another_location (if needed)
spring.flyway.schemas=public # Default schema for PostgreSQL, adjust if needed

# JPA and Hibernate (optional, if you use Entities)
spring.jpa.hibernate.ddl-auto=validate # Recommended for production with Flyway
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Logging
logging.level.org.springframework.jdbc.core=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.software.amazon.jdbc=DEBUG # For AWS JDBC Driver logging, can be FINE or ALL for more detail
logging.level.software.amazon.jdbc.plugin.aurora.AuroraAdvancedFeaturesPlugin=INFO # For our plugin

# Server port
server.port=8080
